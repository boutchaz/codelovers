"use client";

import { useEffect, useRef } from "react";
import Link from "next/link";
import { gsap } from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";
import { heroMetrics, heroCards } from "@/app/data/constants";
import { Button } from "@/components/ui/button";

gsap.registerPlugin(ScrollTrigger);

export function HeroSection() {
  const sectionRef = useRef<HTMLElement>(null);
  const contentRef = useRef<HTMLDivElement>(null);
  const cardsRef = useRef<(HTMLDivElement | null)[]>([]);
  const canvasRef = useRef<HTMLCanvasElement>(null);

  const frameCount = 192; // Total frames extracted from video

  useEffect(() => {
    const section = sectionRef.current;
    const content = contentRef.current;
    const canvas = canvasRef.current;

    if (!section || !content || !canvas) return;

    const context = canvas.getContext("2d");
    if (!context) return;

    // Set canvas dimensions
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    // Handle window resize
    const handleResize = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
      if (images[currentFrameIndex.frame]) {
        context.clearRect(0, 0, canvas.width, canvas.height);
        context.drawImage(images[currentFrameIndex.frame], 0, 0, canvas.width, canvas.height);
      }
    };

    window.addEventListener("resize", handleResize);

    // Generate image URLs from extracted frames
    const currentFrame = (index: number) =>
      `/frames/frame-${(index + 1).toString().padStart(3, "0")}.jpg`;

    const images: HTMLImageElement[] = [];
    const currentFrameIndex = {
      frame: 0,
    };

    let loadedImages = 0;

    // Preload all frames
    for (let i = 0; i < frameCount; i++) {
      const img = new Image();
      img.src = currentFrame(i);
      images.push(img);

      img.onload = () => {
        loadedImages++;

        // When all images are loaded, set up the animation
        if (loadedImages === frameCount) {
          // Draw the first frame
          context.drawImage(images[0], 0, 0, canvas.width, canvas.height);

          // Create ScrollTrigger animation
          gsap.to(currentFrameIndex, {
            frame: frameCount - 1,
            snap: "frame",
            ease: "none",
            scrollTrigger: {
              trigger: section,
              start: "top top",
              end: "+=300%", // Scroll distance for the animation
              scrub: 0.5,
              pin: true,
              anticipatePin: 1,
            },
            onUpdate: function () {
              // Draw the current frame
              context.clearRect(0, 0, canvas.width, canvas.height);
              context.drawImage(images[currentFrameIndex.frame], 0, 0, canvas.width, canvas.height);
            },
          });
        }
      };

      img.onerror = () => {
        console.error(`Failed to load frame: ${currentFrame(i)}`);
      };
    }

    // Mouse move handler for 3D parallax effect on content
    const handleMouseMove = (e: MouseEvent) => {
      const { clientX, clientY } = e;
      const { innerWidth, innerHeight } = window;

      // Calculate mouse position as percentage (-1 to 1)
      const xPercent = (clientX / innerWidth - 0.5) * 2;
      const yPercent = (clientY / innerHeight - 0.5) * 2;

      // Apply subtle 3D transforms to content overlay
      gsap.to(content, {
        rotationY: xPercent * 2,
        rotationX: -yPercent * 2,
        transformPerspective: 1000,
        duration: 0.5,
        ease: "power2.out",
      });

      // Apply parallax to floating cards
      cardsRef.current.forEach((card, index) => {
        if (card) {
          gsap.to(card, {
            x: xPercent * (15 + index * 8),
            y: yPercent * (15 + index * 8),
            duration: 0.5,
            ease: "power2.out",
          });
        }
      });
    };

    // Reset on mouse leave
    const handleMouseLeave = () => {
      gsap.to(content, {
        rotationY: 0,
        rotationX: 0,
        duration: 0.8,
        ease: "elastic.out(1, 0.3)",
      });

      cardsRef.current.forEach((card) => {
        if (card) {
          gsap.to(card, {
            x: 0,
            y: 0,
            duration: 0.8,
            ease: "elastic.out(1, 0.3)",
          });
        }
      });
    };

    section.addEventListener("mousemove", handleMouseMove);
    section.addEventListener("mouseleave", handleMouseLeave);

    return () => {
      section.removeEventListener("mousemove", handleMouseMove);
      section.removeEventListener("mouseleave", handleMouseLeave);
      window.removeEventListener("resize", handleResize);
      ScrollTrigger.getAll().forEach((trigger) => trigger.kill());
    };
  }, []);

  return (
    <section
      ref={sectionRef}
      className="hero-section relative isolate flex min-h-screen items-center justify-center overflow-hidden"
      style={{ perspective: "1500px" }}
    >
      {/* Canvas for frame sequence animation */}
      <canvas
        ref={canvasRef}
        className="absolute inset-0 z-0 h-full w-full object-cover"
        aria-hidden="true"
      />

      {/* Gradient overlay for better text readability */}
      <div className="absolute inset-0 z-[1] bg-gradient-to-b from-slate-950/60 via-slate-950/40 to-slate-950/80" />

      <div className="relative z-10 mx-auto w-full max-w-[1200px] px-6 lg:px-8">
        {/* Centered Content */}
        <div
          ref={contentRef}
          className="mx-auto max-w-4xl space-y-10 text-center"
          style={{ transformStyle: "preserve-3d" }}
        >
          <div className="inline-flex items-center gap-3 rounded-full border border-rose-400/20 bg-white/5 px-4 py-2 text-xs font-semibold uppercase tracking-[0.3em] text-rose-200 backdrop-blur-sm">
            Global Digital Studio
            <span className="h-1 w-1 rounded-full bg-rose-300" />
            Since 2012
          </div>

          <div className="space-y-6">
            <h1 className="text-balance text-5xl font-bold leading-tight sm:text-6xl lg:text-7xl">
              Designing digital experiences that{" "}
              <span className="bg-gradient-to-r from-rose-400 via-red-400 to-orange-300 bg-clip-text text-transparent">
                move businesses forward
              </span>
            </h1>
            <p className="mx-auto max-w-2xl text-lg text-slate-300 sm:text-xl">
              We partner with ambitious teams to imagine bold futures, design distinctive experiences, and engineer
              products that outperform the market.
            </p>
          </div>

          <div className="flex flex-col items-center justify-center gap-4 sm:flex-row">
            <Button asChild size="lg">
              <Link href="#contact">
                Start a project
                <span className="ml-2">→</span>
              </Link>
            </Button>
            <Button asChild variant="outline" size="lg">
              <Link href="#works">
                View our work
                <span className="ml-2">→</span>
              </Link>
            </Button>
          </div>

          <div className="hero-metrics mx-auto grid max-w-4xl gap-6 pt-8 sm:grid-cols-3">
            {heroMetrics.map((metric) => (
              <div
                key={metric.label}
                className="rounded-2xl border border-white/10 bg-gradient-to-br from-white/5 to-white/0 p-6 shadow-[0_0_35px_rgba(225,29,72,0.18)] backdrop-blur-sm"
                style={{ transform: "translateZ(50px)" }}
              >
                <p className="text-3xl font-semibold text-white sm:text-4xl">{metric.value}</p>
                <p className="mt-3 text-sm text-slate-400">{metric.label}</p>
              </div>
            ))}
          </div>
        </div>

        {/* Floating Cards with 3D Parallax */}
        <div className="pointer-events-none absolute inset-0" aria-hidden="true">
          {heroCards.map((card, index) => (
            <div
              key={card.title}
              ref={(el) => {
                cardsRef.current[index] = el;
              }}
              className={`${card.className}`}
              style={{
                transform: `translateZ(${(index + 1) * 30}px)`,
                willChange: "transform",
              }}
            >
              <span className="inline-flex items-center gap-2 rounded-full border border-white/15 bg-white/10 px-3 py-1 text-[11px] font-semibold uppercase tracking-[0.2em] text-rose-200 backdrop-blur-sm">
                {card.badge}
              </span>
              <h3 className="mt-4 text-lg font-semibold text-white">{card.title}</h3>
              <p className="mt-2 text-sm text-slate-300">{card.description}</p>
            </div>
          ))}
        </div>
      </div>
    </section>
  );
}
